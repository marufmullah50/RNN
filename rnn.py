# -*- coding: utf-8 -*-
"""RNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15Tgl22m0oJQAoyMRZdoIrCbQ39-igx7E

# Recurrent Neural Network

## Part 1 - Data Preprocessing

### Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""### Importing the training set"""

dataset_train = pd.read_csv('Google_Stock_Price_Train.csv')
training_set = dataset_train.iloc[:, 1:2].values
#1 to 2 python ignore last so only 1
# we can write it like
# training_set = dataset_train.iloc[:, [1]].values

"""### Feature Scaling"""

from sklearn.preprocessing import MinMaxScaler
sc = MinMaxScaler(feature_range = (0, 1))
training_set_scaled = sc.fit_transform(training_set)

"""### Creating a data structure with 60 timesteps and 1 output"""

X_train = []
y_train = []
for i in range(60, 1258):
    X_train.append(training_set_scaled[i-60:i, 0])
    y_train.append(training_set_scaled[i, 0])
X_train, y_train = np.array(X_train), np.array(y_train)

"""### Reshaping"""

X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))

"""## Part 2 - Building and Training the RNN

### Importing the Keras libraries and packages
"""

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import LSTM
from tensorflow.keras.layers import Dropout

"""### Initialising the RNN"""

regressor = Sequential()

"""### Adding the first LSTM layer and some Dropout regularisation"""

regressor.add(LSTM(units = 50, return_sequences = True, input_shape = (X_train.shape[1], 1)))
regressor.add(Dropout(0.2))

"""### Adding a second LSTM layer and some Dropout regularisation"""

regressor.add(LSTM(units = 50, return_sequences = True))
regressor.add(Dropout(0.2))

"""### Adding a third LSTM layer and some Dropout regularisation"""

regressor.add(LSTM(units = 50, return_sequences = True))
regressor.add(Dropout(0.2))

"""### Adding a fourth LSTM layer and some Dropout regularisation"""

regressor.add(LSTM(units = 50))
#No return required last LSTM so return_sequences will not be here
regressor.add(Dropout(0.2))

"""### Adding the output layer"""

regressor.add(Dense(units = 1))

"""### Compiling the RNN"""

# For RNN best optimizer is RMSprop but 'adam' universal good optimizer so we use it
regressor.compile(optimizer = 'adam', loss = 'mean_squared_error')

"""### Fitting the RNN to the Training set"""

!pip install tensorflow

!pip install --upgrade tensorflow

regressor.fit(X_train, y_train, epochs = 100, batch_size = 32)

"""## Part 3 - Making the predictions and visualising the results

### Getting the real stock price of 2017
"""

dataset_test = pd.read_csv('Google_Stock_Price_Test.csv')
real_stock_price = dataset_test.iloc[:, 1:2].values

"""### Getting the predicted stock price of 2017"""

dataset_total = pd.concat((dataset_train['Open'], dataset_test['Open']), axis = 0) #axis o vertical concate(colum)
inputs = dataset_total[len(dataset_total) - len(dataset_test) - 60:].values
inputs = inputs.reshape(-1,1) # previously .loc isn't used so numpy reshape needed
inputs = sc.transform(inputs)
X_test = []
for i in range(60, 80): #test has 20 data point so (60+20=80 upper bound)
    X_test.append(inputs[i-60:i, 0])
X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))
predicted_stock_price = regressor.predict(X_test)
predicted_stock_price = sc.inverse_transform(predicted_stock_price)

"""#Comparison"""

import pandas as pd

# After predicting stock prices:

# Create a DataFrame with both real and predicted prices
df_comparison = pd.DataFrame({'Real Stock Price': real_stock_price.reshape(len(real_stock_price)),
                             'Predicted Stock Price': predicted_stock_price.reshape(len(predicted_stock_price))})

# Display the DataFrame
print(df_comparison)

"""### Visualising the results"""

plt.plot(real_stock_price, color = 'red', label = 'Real Google Stock Price')
plt.plot(predicted_stock_price, color = 'blue', label = 'Predicted Google Stock Price')
plt.title('Google Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('Google Stock Price')
plt.legend()
plt.show()